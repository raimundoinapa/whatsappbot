Client {
  _events: [Object: null prototype] {
    qr: [Function (anonymous)],
    ready: [Function (anonymous)],
    message: [Function (anonymous)]
  },
  _eventsCount: 3,
  _maxListeners: undefined,
  options: {
    puppeteer: { headless: true, defaultViewport: null },
    webVersion: '2.2346.52',
    webVersionCache: { type: 'local' },
    authTimeoutMs: 0,
    qrMaxRetries: 0,
    takeoverOnConflict: false,
    takeoverTimeoutMs: 0,
    userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36',
    ffmpegPath: 'ffmpeg',
    bypassCSP: false,
    proxyAuthentication: undefined
  },
  authStrategy: NoAuth { client: [Circular *1] },
  pupBrowser: <ref *2> Browser {
    eventsMap: Map(2) { 'targetcreated' => [], 'targetchanged' => [] },
    emitter: {
      all: [Map],
      on: [Function: on],
      off: [Function: off],
      emit: [Function: emit]
    },
    _ignoredTargets: Set(0) {},
    _ignoreHTTPSErrors: false,
    _defaultViewport: null,
    _process: ChildProcess {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      _closesNeeded: 2,
      _closesGot: 0,
      connected: false,
      signalCode: null,
      exitCode: null,
      killed: false,
      spawnfile: 'C:\\rcsoft\\projects\\whatsappbot\\node_modules\\puppeteer\\.local-chromium\\win64-982053\\chrome-win\\chrome.exe',
      _handle: [Process],
      spawnargs: [Array],
      pid: 16792,
      stdin: [Socket],
      stdout: null,
      stderr: [Socket],
      stdio: [Array],
      [Symbol(kCapture)]: false
    },
    _screenshotTaskQueue: TaskQueue { _chain: [Promise] },
    _connection: Connection {
      eventsMap: [Map],
      emitter: [Object],
      _lastId: 114,
      _sessions: [Map],
      _closed: false,
      _callbacks: Map(0) {},
      _url: 'ws://127.0.0.1:61842/devtools/browser/c9e633c7-0b29-4969-a794-b0be3c9ba54a',
      _delay: 0,
      _transport: [NodeWebSocketTransport]
    },
    _closeCallback: [Function: bound close],
    _targetFilterCallback: [Function (anonymous)],
    _defaultContext: BrowserContext {
      eventsMap: Map(0) {},
      emitter: [Object],
      _connection: [Connection],
      _browser: [Circular *2],
      _id: undefined
    },
    _contexts: Map(0) {},
    _targets: Map(5) {
      '1355f5d6-6621-4569-9c53-0c4c01adab09' => [Target],
      '1aaa10d3-3574-4a17-984e-c3a293850dfe' => [Target],
      '51F4717358C6C99F092D321F9EF8378A' => [Target],
      'D27B6679AB8641F8B6B62E3B362E8B4A' => [Target],
      'F870C45C6320DFF08D601D6EAC55E8BC' => [Target]
    }
  },
  pupPage: <ref *3> Page {
    eventsMap: Map(1) { 'response' => [Array] },
    emitter: {
      all: [Map],
      on: [Function: on],
      off: [Function: off],
      emit: [Function: emit]
    },
    _closed: false,
    _timeoutSettings: TimeoutSettings {
      _defaultTimeout: null,
      _defaultNavigationTimeout: null
    },
    _pageBindings: Map(16) {
      'loadingScreen' => [AsyncFunction (anonymous)],
      'qrChanged' => [AsyncFunction (anonymous)],
      'onAddMessageEvent' => [Function (anonymous)],
      'onChangeMessageTypeEvent' => [Function (anonymous)],
      'onChangeMessageEvent' => [Function (anonymous)],
      'onRemoveMessageEvent' => [Function (anonymous)],
      'onMessageAckEvent' => [Function (anonymous)],
      'onChatUnreadCountEvent' => [AsyncFunction (anonymous)],
      'onMessageMediaUploadedEvent' => [Function (anonymous)],
      'onAppStateChangedEvent' => [AsyncFunction (anonymous)],
      'onBatteryStateChangedEvent' => [Function (anonymous)],
      'onIncomingCall' => [Function (anonymous)],
      'onReaction' => [Function (anonymous)],
      'onRemoveChatEvent' => [AsyncFunction (anonymous)],
      'onArchiveChatEvent' => [AsyncFunction (anonymous)],
      'onEditMessageEvent' => [Function (anonymous)]
    },
    _javascriptEnabled: true,
    _workers: Map(1) { '1DAFF8558E68C41B308E7F7E85307CE2' => [WebWorker] },
    _fileChooserInterceptors: Set(0) {},
    _userDragInterceptionEnabled: false,
    _handlerMap: WeakMap { <items unknown> },
    _client: CDPSession {
      eventsMap: [Map],
      emitter: [Object],
      _callbacks: Map(0) {},
      _connection: [Connection],
      _targetType: 'page',
      _sessionId: '562B85318BFA2FAD10235B729117AEA0'
    },
    _target: Target {
      _targetInfo: [Object],
      _browserContext: [BrowserContext],
      _targetId: '51F4717358C6C99F092D321F9EF8378A',
      _sessionFactory: [Function (anonymous)],
      _ignoreHTTPSErrors: false,
      _defaultViewport: null,
      _screenshotTaskQueue: [TaskQueue],
      _pagePromise: [Promise],
      _workerPromise: null,
      _initializedCallback: [Function (anonymous)],
      _initializedPromise: [Promise],
      _closedCallback: [Function (anonymous)],
      _isClosedPromise: [Promise],
      _isInitialized: true
    },
    _keyboard: Keyboard {
      _modifiers: 0,
      _pressedKeys: Set(0) {},
      _client: [CDPSession]
    },
    _mouse: Mouse {
      _x: 0,
      _y: 0,
      _button: 'none',
      _client: [CDPSession],
      _keyboard: [Keyboard]
    },
    _touchscreen: Touchscreen { _client: [CDPSession], _keyboard: [Keyboard] },
    _accessibility: Accessibility { _client: [CDPSession] },
    _frameManager: FrameManager {
      eventsMap: [Map],
      emitter: [Object],
      _frames: [Map],
      _contextIdToContext: [Map],
      _isolatedWorlds: [Set],
      _client: [CDPSession],
      _page: [Circular *3],
      _networkManager: [NetworkManager],
      _timeoutSettings: [TimeoutSettings],
      _mainFrame: [Frame]
    },
    _emulationManager: EmulationManager {
      _emulatingMobile: false,
      _hasTouch: false,
      _client: [CDPSession]
    },
    _tracing: Tracing { _recording: false, _path: '', _client: [CDPSession] },
    _coverage: Coverage { _jsCoverage: [JSCoverage], _cssCoverage: [CSSCoverage] },
    _screenshotTaskQueue: TaskQueue { _chain: [Promise] },
    _viewport: null
  },
  info: ClientInfo {
    pushname: "'Raimundo Araujo",
    wid: {
      server: 'c.us',
      user: '18097037587',
      _serialized: '18097037587@c.us'
    },
    me: {
      server: 'c.us',
      user: '18097037587',
      _serialized: '18097037587@c.us'
    },
    phone: undefined,
    platform: 'android'
  },
  interface: InterfaceController {
    pupPage: <ref *3> Page {
      eventsMap: [Map],
      emitter: [Object],
      _closed: false,
      _timeoutSettings: [TimeoutSettings],
      _pageBindings: [Map],
      _javascriptEnabled: true,
      _workers: [Map],
      _fileChooserInterceptors: Set(0) {},
      _userDragInterceptionEnabled: false,
      _handlerMap: [WeakMap],
      _client: [CDPSession],
      _target: [Target],
      _keyboard: [Keyboard],
      _mouse: [Mouse],
      _touchscreen: [Touchscreen],
      _accessibility: [Accessibility],
      _frameManager: [FrameManager],
      _emulationManager: [EmulationManager],
      _tracing: [Tracing],
      _coverage: [Coverage],
      _screenshotTaskQueue: [TaskQueue],
      _viewport: null
    }
  },
  [Symbol(kCapture)]: false